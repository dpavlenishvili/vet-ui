{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nx"],
  "overrides": [
    {
      "files": "*.json",
      "parser": "jsonc-eslint-parser",
      "rules": {}
    },
    {
      "files": ["*.ts"],
      "rules": {
        "no-restricted-syntax": [
          "error",
          {
            "selector": "ImportDeclaration[source.value='@angular/common'] > ImportSpecifier[imported.name='CommonModule']",
            "message": "Do not import and use 'CommonModule' from '@angular/common', instead use other standalone alternatives"
          },
          {
            "selector": "ImportDeclaration[source.value='@angular/core'] > ImportSpecifier[imported.name='Input']",
            "message": "Do not import and use '@Input' from '@angular/core', instead use signal inputs"
          },
          {
            "selector": "ImportDeclaration[source.value='@angular/core'] > ImportSpecifier[imported.name='Output']",
            "message": "Do not import and use '@Output' from '@angular/core', instead use functional outputs"
          },
          {
            "selector": "ImportDeclaration[source.value='@angular/core'] > ImportSpecifier[imported.name='ViewChild']",
            "message": "Do not import and use '@ViewChild' from '@angular/core', instead use signal based viewChild"
          },
          {
            "selector": "ImportDeclaration[source.value='@angular/core'] > ImportSpecifier[imported.name='ViewChildren']",
            "message": "Do not import and use '@ViewChildren' from '@angular/core', instead use signal based viewChildren"
          },
          {
            "selector": "ImportDeclaration[source.value='@angular/core'] > ImportSpecifier[imported.name='ContentChild']",
            "message": "Do not import and use '@ContentChild' from '@angular/core', instead use signal based contentChild"
          },
          {
            "selector": "ImportDeclaration[source.value='@angular/core'] > ImportSpecifier[imported.name='ContentChildren']",
            "message": "Do not import and use '@ContentChildren' from '@angular/core', instead use signal based contentChildren"
          }
        ],
        "no-restricted-globals": [
          "error",
          {
            "name": "document",
            "message": "Do not use 'document' directly. Instead, use the Renderer2 service or tokens from 'ng-web-apis'"
          },
          {
            "name": "window",
            "message": "Do not use 'window' directly. Instead, use the Renderer2 service or tokens from 'ng-web-apis'"
          },
          {
            "name": "localStorage",
            "message": "Do not use 'localStorage' directly. Instead, use the LocalStorage service from '@angular/local-storage'"
          },
          {
            "name": "sessionStorage",
            "message": "Do not use 'sessionStorage' directly. Instead, use the SessionStorage service from '@angular/local-storage'"
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "vet",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "vet",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/prefer-standalone": "off"
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@nx/typescript"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nx/javascript"],
      "rules": {}
    },
    {
      "files": ["*.spec.ts", "*.spec.tsx", "*.spec.js", "*.spec.jsx"],
      "env": {
        "jest": true
      },
      "rules": {}
    }
  ]
}
