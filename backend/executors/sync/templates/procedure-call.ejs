<%
const { utils, route, config } = it;
const { requestBodyInfo, responseBodyInfo, specificArgNameResolver } = route;
const { _, getInlineParseContent, getParseContent, parseSchema, getComponentByRef, require } = utils;
const { parameters, path, method, payload, query, formData, security, requestParams } = route.request;
const { type, errorType, contentTypes } = route.response;
const { HTTP_CLIENT, RESERVED_REQ_PARAMS_ARG_NAMES } = config.constants;
const routeDocs = includeFile("@base/route-docs", { config, route, utils });
const queryName = (query && query.name) || "query";
const pathParams = _.values(parameters);
const pathParamsNames = _.map(pathParams, "name");
const getSuccessResponseTypes = () => {
    const successResponses = responseBodyInfo.responses.filter(response => response.isSuccess);

    return config.Ts.UnionType(successResponses.map((response) => response.type)) || this.config.Ts.Keyword.Any;
}

const argToTmpl = ({ name, optional, type, defaultValue }) => `${name}${!defaultValue && optional ? '?' : ''}: ${type}${defaultValue ? ` = ${defaultValue}` : ''}`;

const rawWrapperArgs = config.extractRequestParams ?
    _.compact([
        requestParams && {
          name: pathParams.length ? `{ ${_.join(pathParamsNames, ", ")}, ...${queryName} }` : queryName,
          optional: false,
          type: getInlineParseContent(requestParams)
        },
        ...(!requestParams ? pathParams : []),
        payload
    ]) :
    _.compact([
        ...pathParams,
        query,
        payload
    ])

const wrapperArgs = _
    // Sort by optionality
    .sortBy(rawWrapperArgs, [o => o.optional])
    .map(argToTmpl)
    .join(', ')

// RequestParams["type"]
const requestContentKind = {
    "JSON": "ContentType.Json",
    "URL_ENCODED": "ContentType.UrlEncoded",
    "FORM_DATA": "ContentType.FormData",
    "TEXT": "ContentType.Text",
}

const bodyTmpl = _.get(payload, "name") || null;
const queryTmpl = (query != null && queryName) || null;
const bodyContentKindTmpl = requestContentKind[requestBodyInfo.contentKind] || null;
const methodName = route.routeName.usage;

const describeReturnType = () => {
    if (!config.toJS) return "";
    return `Observable<${getSuccessResponseTypes()}>`;
}

const _method = _.lowerCase(method);

const isGet = () => _method === 'get';
const isPost = () => _method === 'post';
const isPut = () => _method === 'put';
const isPatch = () => _method === 'patch';
const isDelete = () => _method === 'delete';
const isOptions = () => _method === 'options';
const optionsParamName = 'options';
const apiUrl = '`${this.baseUrl}' + path + '`';
const getOptionsParam = () => {
  return `${optionsParamName}: HttpRequestOptions = {}`;
  // @todo Do this later, based on method
  if (isGet() || isOptions()) {
    return `${optionsParamName}: Omit<Parameters<HttpClient['get']>[1], 'params'> = {}`;
  }
  if (isPost() || isPut() || isPatch()) {
    return `${optionsParamName}: Parameters<HttpClient['${_method}']>[2] = {}`;
  }
  if (isDelete()) {
    return `${optionsParamName}: Parameters<HttpClient['delete']>[1] = {}`;
  }
};

const methodCode = (() => {
  if (isGet() || isOptions()) {
    return `
        ${methodName} = (${wrapperArgs ? [wrapperArgs, getOptionsParam()].join(', ') : getOptionsParam()}) => {
          return this.httpClient.${_method}<${getSuccessResponseTypes()}>(${apiUrl}, ${queryTmpl ? `{ params: ${queryTmpl} as unknown as Record<string, string>, ...${optionsParamName} }` : optionsParamName});
        }
    `;
  }
  if (isPost() || isPut() || isPatch()) {
    return `
        ${methodName} = (${wrapperArgs ? [wrapperArgs, getOptionsParam()].join(', ') : getOptionsParam()}) => {
            return this.httpClient.${_method}<${getSuccessResponseTypes()}>(${apiUrl}, ${bodyTmpl ? bodyTmpl : 'null'}, ${queryTmpl ? `{ params: ${queryTmpl} as unknown as Record<string, string>, ...${optionsParamName} }` : optionsParamName});
        };
    `;
  }
  if (isDelete()) {
    return `
        ${methodName} = (${wrapperArgs ? [wrapperArgs, getOptionsParam()].join(', ') : getOptionsParam()}) => {
            return this.httpClient.${_method}<${getSuccessResponseTypes()}>(${apiUrl}, ${queryTmpl ? `{ params: ${queryTmpl} as unknown as Record<string, string>, ...${optionsParamName} }` : optionsParamName});
        };
    `;
    }
})();

%>
/**
<%~ routeDocs.description %>
 *<% /* Here you can add some other JSDoc tags */ %>
<%~ routeDocs.lines %>
 */
<%~ methodCode %>
